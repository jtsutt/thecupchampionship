{
  "_args": [
    [
      {
        "raw": "filestack-js",
        "scope": null,
        "escapedName": "filestack-js",
        "name": "filestack-js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/jonathansutton/Desktop/localmarket3"
    ]
  ],
  "_from": "filestack-js@latest",
  "_id": "filestack-js@0.4.2",
  "_inCache": true,
  "_location": "/filestack-js",
  "_nodeVersion": "7.7.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/filestack-js-0.4.2.tgz_1490460767329_0.03192987642250955"
  },
  "_npmUser": {
    "name": "filestack-dev",
    "email": "dev@filestack.com"
  },
  "_npmVersion": "4.4.4",
  "_phantomChildren": {},
  "_requested": {
    "raw": "filestack-js",
    "scope": null,
    "escapedName": "filestack-js",
    "name": "filestack-js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/filestack-js/-/filestack-js-0.4.2.tgz",
  "_shasum": "1b1787d456e089b1f7789e251d0a0a6a6b90b800",
  "_shrinkwrap": null,
  "_spec": "filestack-js",
  "_where": "/Users/jonathansutton/Desktop/localmarket3",
  "author": {
    "name": "Filestack"
  },
  "bugs": {
    "url": "https://github.com/filestack/filestack-js/issues"
  },
  "dependencies": {
    "api-client": "http://static.filestackapi.com/packages/api-client/api-client-0.3.4.tar.gz",
    "logger": "http://static.filestackapi.com/packages/logger/logger-1.3.3.tar.gz",
    "picker": "http://static.filestackapi.com/packages/picker/picker-0.4.1.tar.gz"
  },
  "description": "Official browser client for Filestack",
  "devDependencies": {
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-register": "^6.22.0",
    "babelrc-rollup": "^3.0.0",
    "chai": "^3.5.0",
    "chai-spies": "^0.7.1",
    "electron": "^1.4.4",
    "electron-mocha": "^3.1.1",
    "eslint": "^3.5.0",
    "eslint-config-airbnb-base": "^8.0.0",
    "eslint-plugin-import": "^1.16.0",
    "fs-jetpack": "^0.10.2",
    "http-server": "^0.9.0",
    "minimist": "^1.2.0",
    "pre-commit": "^1.1.3",
    "release-o-tron": "http://static.filestackapi.com/packages/release-o-tron/release-o-tron-1.3.6.tar.gz",
    "rollup": "^0.41.4",
    "rollup-plugin-babel": "^2.7.1",
    "rollup-plugin-commonjs": "^7.0.0",
    "rollup-plugin-inject": "^2.0.0",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-replace": "^1.1.1",
    "rollup-plugin-uglify": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "1b1787d456e089b1f7789e251d0a0a6a6b90b800",
    "tarball": "https://registry.npmjs.org/filestack-js/-/filestack-js-0.4.2.tgz"
  },
  "gitHead": "10b509b4172abcb3027e0cc8a8051b76a3282365",
  "homepage": "https://github.com/filestack/filestack-js#readme",
  "jsnext:main": "dist/filestack.es2015.js",
  "keywords": [
    "filestack",
    "file",
    "upload",
    "multi-part",
    "processing",
    "store",
    "picker"
  ],
  "license": "ISC",
  "main": "dist/filestack.js",
  "maintainers": [
    {
      "name": "filestack-dev",
      "email": "dev@filestack.com"
    }
  ],
  "module": "dist/filestack.es2015.js",
  "name": "filestack-js",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "filestack-js\n======================\n\nOfficial browser client to the Filestack API's. Available via NPM and CDN script.\n\nFilestack documentation can be found here: https://filestack.com/docs/\n\n## Installation\n```sh\nnpm install --save filestack-js\n```\n## Usage\n\nVia ES6 modules:\n```js\nimport filestack from 'filestack-js';\n\nconst apikey = 'abc';\nconst client = filestack.init(apikey);\n```\n\nVia script tag:\n```HTML\n<script src=\"http://static.filestackapi.com/v3/filestack.js\"></script>\n<script>\n  const apikey = 'abc';\n  const client = filestack.init(apikey);\n</script>\n```\n\n# API Reference\n  \n* [filestack](#module_filestack)\n    * [~version](#module_filestack..version) ⇒ <code>string</code>\n    * [~init(apikey, [security])](#module_filestack..init) ⇒ <code>object</code>\n    \t* [.getSecurity()](#module_filestack..init.getSecurity) ⇒ <code>object</code>\n        * [.setSecurity(security)](#module_filestack..init.setSecurity) ⇒ <code>object</code>\n        * [.pick([options])](#exp_module_pick--pick) ⇒ <code>Promise</code>\n       \t* [.storeURL(url, [options])](#module_filestack..init.storeURL) ⇒ <code>Promise</code>\n        * [.retrieve(handle, [options])](#module_filestack..init.retrieve) ⇒ <code>Promise</code>\n        * [.remove(handle)](#module_filestack..init.remove) ⇒ <code>Promise</code>\n        * [.metadata(handle, [options])](#module_filestack..init.metadata) ⇒ <code>Promise</code>\n        * [.transform(url, options)](#module_filestack..init.transform) ⇒ <code>string</code>\n        * [.upload(file, [uploadOptions], [storeOptions])](#module_filestack..init.upload) ⇒ <code>Promise</code>\n    * [~TransformOptions](#module_filestack..TransformOptions) : <code>object</code>\n    * [~progressCallback](#module_filestack..progressCallback) : <code>function</code>\n    * [~retryCallback](#module_filestack..retryCallback) : <code>function</code>\n\n\n<a name=\"module_filestack..version\"></a>\n\n### filestack~version ⇒ <code>string</code>\nGets current version.\n\n**Kind**: inner property of <code>[filestack](#module_filestack)</code>  \n**Example**  \n```js\nimport filestack from 'filestack-js';\nconsole.log(filestack.version);\n```\n<a name=\"module_filestack..init\"></a>\n\n### filestack~init(apikey, [security]) ⇒ <code>object</code>\nInitializes the client.\n\n**Kind**: inner method of <code>[filestack](#module_filestack)</code>  \n**Returns**: <code>object</code> - Object containing the available methods documented below.  \n**Params**\n  - apikey <code>string</code> - Filestack API key. Get a free key [here](https://dev.filestack.com/register/free).  \n  - [security] <code>object</code> - Read about [security policies](https://www.filestack.com/docs/security).  \n    - .policy <code>string</code> - Filestack security policy encoded in base64.  \n    - .signature <code>string</code> - HMAC-SHA256 sIgnature for the security policy.  \n\n<a name=\"exp_module_pick--pick\"></a>\n  \n<a name=\"module_filestack..init.getSecurity\"></a>\n\n### client.getSecurity() ⇒ <code>object</code>\nGet current security parameters.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Returns**: <code>object</code> - Object containing current security parameters  \n<a name=\"module_filestack..init.setSecurity\"></a>\n\n### client.setSecurity(security) ⇒ <code>object</code>\nSet security parameters -- useful for changing policy on instantiated client.\n\n**Note:** Does not currently work with `pick`. You will need to re-init the client if you want to propagate new security parameters to the picker.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Returns**: <code>object</code> - Object containing current session parameters  \n**Params**\n\n- security <code>object</code> - Read about [security policies](https://www.filestack.com/docs/security).\n    - .policy <code>string</code> - Filestack security policy encoded in base64.\n    - .signature <code>string</code> - HMAC-SHA256 sIgnature for the security policy.\n\n**Example**  \n```js\nclient.setSecurity({ policy: 'policy', signature: 'signature' });\n```\n\n### client.pick([options]) ⇒ <code>Promise</code> ⏏\nOpens the picker UI.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Fulfil**: <code>object</code> - Object contains keys `filesUploaded` and `filesFailed` which are both arrays of file metadata.  \n**Params**\n\n- [options] <code>object</code>\n    - .fromSources <code>Array.&lt;string&gt;</code> - Valid sources are:\n      - `local_file_system` - __Default__\n      - `imagesearch` - __Default__\n      - `facebook` - __Default__\n      - `instagram` - __Default__\n      - `googledrive` - __Default__\n      - `dropbox` - __Default__\n      - `evernote`\n      - `flickr`\n      - `box`\n      - `github`\n      - `gmail`\n      - `picasa`\n      - `onedrive`\n      - `clouddrive`\n    - .accept <code>string</code> | <code>Array.&lt;string&gt;</code> - Restrict file types that are allowed to be picked. Formats accepted:\n      - `.pdf` <- any file extension\n      - `image/jpeg` <- any mime type commonly known by browsers\n      - `image/*` <- special mime type accepting all types of images\n      - `video/*` <- special mime type accepting all types of video files\n      - `audio/*` <- special mime type accepting all types of audio files\n    - .preferLinkOverStore <code>boolean</code> <code> = false</code> - For cloud sources whether to __link__ or __store__ files.\n    - .lang <code>string</code> <code> = &quot;en&quot;</code> - Sets locale. Accepts: `da`, `de`, `en`, `es`, `fr`, `it`, `nl`, `pl`, `pt`, `ru`, `zh`.\n    - .minFiles <code>number</code> <code> = 1</code> - Minimum number of files required to start uploading.\n    - .maxFiles <code>number</code> <code> = 1</code> - Maximum number of files allowed to upload.\n    - .startUploadingWhenMaxFilesReached <code>boolean</code> <code> = false</code> - Whether to start uploading automatically when maxFiles is hit.\n    - .hideWhenUploading <code>boolean</code> <code> = false</code> - Hide the picker UI once uploading begins.\n    - .uploadInBackground <code>boolean</code> <code> = true</code> - Start uploading immediately on file selection.\n    - .disableTransformer <code>boolean</code> <code> = false</code> - When true removes ability to edit images with transformer UI.\n    - .transformOptions <code>object</code> - Options to be passed to the transformer UI.\n      - .minDimensions <code>array</code> - Minimum dimensions for picked image. Image will be upscaled if smaller. (e.g. [200, 300])\n      - .maxDimensions <code>array</code> - Maximum dimensions for picked image. Image will be downscaled if smaller. (e.g. [200, 300])\n      - .transformations <code>object</code> - Enable and set options for various transformations.\n          - .crop <code>boolean</code> | <code>object</code> - Enable crop.\n              - .aspectRatio <code>number</code> - Maintain aspect ratio for crop selection. (e.g. 16/9 or 4/3)\n        - .rotate <code>boolean</code> - Enable rotate.\n        - .circle <code>boolean</code> - Enable circle.\n        - .monochrome <code>boolean</code> - Enable monochrome.\n        - .sepia <code>boolean</code> - Enable sepia.\n    - .storeTo <code>object</code> - Options for file storage.\n        - .location <code>string</code> <code> = &quot;s3&quot;</code> - One of `s3`, `gcs`, `rackspace`, `azure`, `dropbox`.\n        - [.region] <code>string</code> - Valid S3 region for the selected container (S3 only).\n        - .container <code>string</code>\n        - .path <code>string</code>\n        - .access <code>string</code> - One of `public` or `private`.\n    - .onFileSelected <code>[onFileSelected](#module_pick--pick..onFileSelected)</code> - Called whenever user selects a file.\n    - .onFileUploadStarted <code>[onFileUploadStarted](#module_pick--pick..onFileUploadStarted)</code> - Called when a file begins uploading.\n    - .onFileUploadProgress <code>[onFileUploadProgress](#module_pick--pick..onFileUploadProgress)</code> - Called during multi-part upload progress events.\n    - .onFileUploadFinished <code>[onFileUploadFinished](#module_pick--pick..onFileUploadFinished)</code> - Called when a file is done uploading.\n    - .onFileUploadFailed <code>[onFileUploadFailed](#module_pick--pick..onFileUploadFailed)</code> - Called when uploading a file fails.\n\n**Example**\n```js\nclient.pick({\n  maxFiles: 20,\n  fromSources: ['local_file_system', 'facebook'],\n}).then(res => console.log(res));\n```\n<a name=\"module_pick--pick..onFileSelected\"></a>\n\n#### client.pick~onFileSelected : <code>function</code>\n**Kind**: inner typedef of <code>[pick](#exp_module_pick--pick)</code>\n\n**Params**\n\n- file <code>object</code> - File metadata.\n\n**Example**\n```js\n// Using to veto file selection\n// If you throw any error in this function it will reject the file selection.\n// The error message will be displayed to the user as an alert.\nonFileSelected(file) {\n  if (file.size > 1000 * 1000) {\n    throw new Error('File too big, select something smaller than 1MB');\n  }\n}\n\n// Using to change selected file name\nonFileSelected(file) {\n  file.name = 'foo';\n  // It's important to return altered file by the end of this function.\n  return file;\n}\n```\n<a name=\"module_pick--pick..onFileUploadStarted\"></a>\n\n#### client.pick~onFileUploadStarted : <code>function</code>\n**Kind**: inner typedef of <code>[pick](#exp_module_pick--pick)</code>\n\n**Params**\n\n- file <code>object</code> - File metadata.\n\n<a name=\"module_pick--pick..onFileUploadFinished\"></a>\n\n#### client.pick~onFileUploadFinished : <code>function</code>\n**Kind**: inner typedef of <code>[pick](#exp_module_pick--pick)</code>\n\n**Params**\n\n- file <code>object</code> - File metadata.\n\n<a name=\"module_pick--pick..onFileUploadFailed\"></a>\n\n#### client.pick~onFileUploadFailed : <code>function</code>\n**Kind**: inner typedef of <code>[pick](#exp_module_pick--pick)</code>\n\n**Params**\n\n- file <code>object</code> - File metadata.\n- error <code>error</code> - Error instance for this upload.\n\n<a name=\"module_pick--pick..onFileUploadProgress\"></a>\n\n#### client.pick~onFileUploadProgress : <code>function</code>\n**Kind**: inner typedef of <code>[pick](#exp_module_pick--pick)</code>\n\n**Params**\n\n- file <code>object</code> - File metadata.\n- event <code>object</code> - Progress event.\n    - .totalProgressPercent <code>number</code> - Percent of total upload.\n    - .progressTotal <code>number</code> - Total number of bytes uploaded thus far across all parts.\n    - .part <code>number</code> - Part #.\n    - .loaded <code>number</code> - Amount of data in this part that has been uploaded.\n    - .byteLength <code>number</code> - Total number of bytes in this part.\n\n<a name=\"module_filestack..init.storeURL\"></a>\n\n### client.storeURL(url, [options]) ⇒ <code>Promise</code>\nInterface to the Filestack [Store API](https://www.filestack.com/docs/rest-api/store). Used for storing from a URL.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Fulfil**: <code>object</code> - Metadata of stored file.  \n**Reject**: <code>error</code> - A Superagent error object.  \n**Params**\n\n- url <code>string</code> - Valid URL to a file.\n- [options] <code>object</code>\n    - .filename <code>string</code>\n    - .location <code>string</code> <code> = &quot;s3&quot;</code> - One of `s3`, `gcs`, `rackspace`, `azure`, `dropbox`.\n    - .mimetype <code>string</code>\n    - .path <code>string</code>\n    - .container <code>string</code>\n    - .region <code>string</code> - Valid S3 region for the selected container (S3 only).\n    - .access <code>string</code> - One of `public` or `private`.\n\n**Example**  \n```js\nclient\n  .storeURL('https://d1wtqaffaaj63z.cloudfront.net/images/NY_199_E_of_Hammertown_2014.jpg')\n  .then(res => console.log(res));\n```\n<a name=\"module_filestack..init.retrieve\"></a>\n\n### client.retrieve(handle, [options]) ⇒ <code>Promise</code>\nInterface to the Filestack [Retrieve API](https://www.filestack.com/docs/rest-api/retrieve).\nUsed for accessing files via Filestack handles.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Fulfil**: <code>object</code> - Metadata of stored file or stored file, depending on metadata / head option.  \n**Reject**: <code>error</code> - A Superagent error object.  \n**Params**\n\n- handle <code>string</code> - Valid Filestack handle.\n- [options] <code>object</code>\n    - .metadata <code>boolean</code> - return json of file metadata\n    - .head <code>boolean</code> - perform a 'head' request instead of a 'get'\n    - .dl <code>boolean</code> - X-File-Name will be returned\n    - .extension <code>string</code> - add extension to handle\n\n**Example**  \n```js\nclient\n  .retrieve('DCL5K46FS3OIxb5iuKby')\n  .then((blob) => {\n     var urlCreator = window.URL || window.webkitURL;\n     var imageUrl = urlCreator.createObjectURL(blob);\n     document.querySelector('#myImage').src = imageUrl;\n  })\n  .catch((err) => {\n     console.log(err);\n  }));\n```\n<a name=\"module_filestack..init.remove\"></a>\n\n### client.remove(handle) ⇒ <code>Promise</code>\nInterface to the Filestack [Remove API](https://www.filestack.com/docs/rest-api/remove).\nUsed for removing files, __requires security to be enabled__.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Fulfil**: <code>object</code> - Result of remove.  \n**Reject**: <code>error</code> - A Superagent error object.  \n**Params**\n\n- handle <code>string</code> - Valid Filestack handle.\n\n**Example**  \n```js\nclient\n  .remove('DCL5K46FS3OIxb5iuKby')\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  }));\n```\n<a name=\"module_filestack..init.metadata\"></a>\n\n### client.metadata(handle, [options]) ⇒ <code>Promise</code>\nInterface to the Filestack [Metadata API](https://www.filestack.com/docs/rest-api/meta-data).\nUsed for retrieving detailed data of stored files.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Fulfil**: <code>object</code> - Result of metadata.  \n**Reject**: <code>error</code> - A Superagent error object.  \n**Params**\n\n- handle <code>string</code> - Valid Filestack handle.\n- [options] <code>object</code>\n    - .size <code>boolean</code>\n    - .mimetype <code>boolean</code>\n    - .filename <code>boolean</code>\n    - .width <code>boolean</code>\n    - .height <code>boolean</code>\n    - .uploaded <code>boolean</code>\n    - .writeable <code>boolean</code>\n    - .cloud <code>boolean</code>\n    - .sourceUrl <code>boolean</code>\n    - .md1 <code>boolean</code>\n    - .sha1 <code>boolean</code>\n    - .sha224 <code>boolean</code>\n    - .sha256 <code>boolean</code>\n    - .sha384 <code>boolean</code>\n    - .sha512 <code>boolean</code>\n    - .location <code>boolean</code>\n    - .path <code>boolean</code>\n    - .container <code>boolean</code>\n    - .exif <code>boolean</code>\n\n**Example**  \n```js\nclient\n  .metadata('DCL5K46FS3OIxb5iuKby')\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  }));\n```\n<a name=\"module_filestack..init.transform\"></a>\n\n### client.transform(url, options) ⇒ <code>string</code>\nInterface to the Filestack [transformation engine](https://www.filestack.com/docs/image-transformations).\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Returns**: <code>string</code> - A new URL that points to the transformed resource.  \n**Params**\n\n- url <code>string</code> - Valid URL to an image.\n- options <code>[TransformOptions](#module_filestack..TransformOptions)</code> - Transformations are applied in the order specified by this object.\n\n**Example**  \n```js\nconst transformedUrl = client.transform(url, {\n  crop: {\n    dim: {\n      x: 0,\n      y: 50,\n      width: 300,\n      height: 300,\n    },\n  },\n  vignette: {\n    blurmode: 'gaussian',\n    amount: 50,\n  },\n  flip: true,\n};\n\n// optionally store the new URL\nclient.storeURL(transformedUrl).then(res => console.log(res));\n```\n<a name=\"module_filestack..init.upload\"></a>\n\n### client.upload(file, [uploadOptions], [storeOptions]) ⇒ <code>Promise</code>\nInitiates a multi-part upload flow.\n\n**Kind**: static method of <code>[init](#module_filestack..init)</code>  \n**Fulfil**: <code>object</code> - Metadata of uploaded file.  \n**Reject**: <code>error</code> - An error object depending on where the flow halted.  \n**Params**\n\n- file <code>File</code> - must be a valid [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n- [uploadOptions] <code>object</code>\n    - [.partSize] <code>number</code> <code> = 5 * 1024 * 1024</code> - Size of each uploaded part.\n    - [.maxConcurrentUploads] <code>number</code> <code> = 5</code> - Max number of concurrent uploads.\n    - [.retryOptions] <code>object</code> - params for retry settings\n        - [.retries] <code>number</code> <code> = 10</code> - max number of retries\n        - [.factor] <code>number</code> <code> = 2</code> - the exponential factor to use\n        - [.minTimeout] <code>number</code> <code> = 1 * 1000</code> - ms before starting first retry\n        - [.maxTimeout] <code>number</code> <code> = 60 * 1000</code> - max ms between two retries\n    - [.onStart] <code>function</code> - Called when the flow begins (before Filestack handshake request is made).\n    - [.onUploadStart] <code>function</code> - Called when an upload begins (after S3 request is made).\n    - [.onProgress] <code>[progressCallback](#module_filestack..progressCallback)</code> - Called on progress event.\n    - [.onRetry] <code>[retryCallback](#module_filestack..retryCallback)</code> - Called if upload fails and retry is occurring\n    - [.onUploadComplete] <code>function</code> - Called when an upload is completing (before final completion request).\n- [storeOptions] <code>object</code> - Configure where the file is stored.\n    - .location <code>string</code> - Valid options are: `s3`, `gcs`, `dropbox`, `azure`, `rackspace`.\n    - .container <code>string</code> - Name of the storage container.\n    - [.region] <code>string</code> - Valid S3 region for the selected container (S3 only).\n    - .path <code>string</code> - Path where the file will be stored. A trailing slash will put the file in that folder path.\n    - .access <code>string</code> - Valid options are `private` or `public`.\n    \n**Example**  \n```js\nclient.upload(file).then(res => console.log(res));\n```\n<a name=\"module_filestack..TransformOptions\"></a>\n\n### filestack~TransformOptions : <code>object</code>\n**Kind**: inner typedef of <code>[filestack](#module_filestack)</code>  \n**Params**\n\n- crop <code>object</code> - [Crop options.](https://www.filestack.com/docs/image-transformations/crop)\n    - .dim <code>object</code> - Crop dimensions.\n        - .x <code>number</code>\n        - .y <code>number</code>\n        - .width <code>number</code>\n        - .height <code>number</code>\n- resize <code>object</code> - [Resize options.](https://www.filestack.com/docs/image-transformations/resize) At least one option is __required__.\n    - .width <code>number</code>\n    - .height <code>number</code>\n    - .fit <code>string</code> - One of `clip`, `crop`, `scale`, `max`.\n    - .align <code>string</code> - One of `center`, `top`, `bottom`, `left`, `right`, `faces`, or align pair like `['top', 'left']`.\n- rotate <code>object</code> - [Rotate options](https://www.filestack.com/docs/image-transformations/rotate). At least one option is __required__.\n    - .deg <code>number</code> | <code>string</code> - Can be number in range 0-359 or `exif`.\n    - .exif <code>boolean</code>\n    - .background <code>string</code>\n- flip <code>boolean</code> - [Flip](https://www.filestack.com/docs/image-transformations/rotate#flip) image\n- flop <code>boolean</code> - [Flop](https://www.filestack.com/docs/image-transformations/rotate#flop) image\n- roundedCorners <code>object</code> - [Rounded corners options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#rounded-corners)\n    - .radius <code>number</code> | <code>string</code> - Can be number in range 1-10000 or `max`.\n    - .blur <code>number</code>\n    - .background <code>string</code>\n- vignette <code>object</code> - [Vignette options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#vignette)\n    - .amount <code>number</code>\n    - .blurmode <code>string</code> - One of `linear` or `gaussian`.\n    - .background <code>string</code>\n- polaroid <code>object</code> - [Polaroid options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#polaroid)\n    - .color <code>string</code>\n    - .rotate <code>number</code>\n    - .background <code>string</code>\n- tornEdges <code>object</code> - [Torn edges options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#torn-edges)\n    - .spread <code>Array.&lt;number&gt;</code> - Range format `[10, 50]`.\n    - .background <code>string</code>\n- shadow <code>object</code> - [Shadow options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#shadow)\n    - .blur <code>number</code>\n    - .opacity <code>number</code>\n    - .vector <code>Array.&lt;number&gt;</code> - Range format `[25, 25]`.\n    - .color <code>string</code>\n    - .background <code>string</code>\n- circle <code>object</code> - [Circle options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#circle)\n    - .background <code>string</code>\n- border <code>object</code> - [Border options.](https://www.filestack.com/docs/image-transformations/borders-and-effects#border)\n    - .width <code>number</code>\n    - .color <code>number</code>\n    - .background <code>number</code>\n- monochrome <code>boolean</code> - [Monochrome.](https://www.filestack.com/docs/image-transformations/filters#monochrome)\n- sepia <code>object</code> - [Sepia.](https://www.filestack.com/docs/image-transformations/filters#sepia)\n    - .tone <code>number</code>\n\n<a name=\"module_filestack..progressCallback\"></a>\n\n### filestack~progressCallback : <code>function</code>\n**Kind**: inner typedef of <code>[filestack](#module_filestack)</code>  \n**Params**\n\n- event <code>object</code> - Progress event.\n    - .totalProgressPercent <code>number</code> - Percent of total upload.\n    - .progressTotal <code>number</code> - Total number of bytes uploaded thus far across all parts.\n    - .part <code>number</code> - Part #.\n    - .loaded <code>number</code> - Amount of data in this part that has been uploaded.\n    - .byteLength <code>number</code> - Total number of bytes in this part.\n    \n### filestack~retryCallback : <code>function</code>\n**Kind**: inner typedef of <code>[filestack](#module_filestack)</code>  \n**Params**\n\n- attempt <code>number</code> - Which attempt the upload is currently on.\n- nextAttempt <code>number</code> - ms before the attempt will start\n\n\n* * *\n\n&copy; 2017 Filestack.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/filestack/filestack-js.git"
  },
  "scripts": {
    "build": "rollup -c",
    "build-cdn": "rollup -c rollup_cdn.config.js",
    "lint": "eslint .",
    "pretest": "npm run build -- --env=test",
    "publish": "node scripts/publish.js",
    "release-finish": "release-o-tron --finish",
    "release-start": "release-o-tron --start",
    "start": "http-server -o",
    "test": "electron-mocha --recursive --renderer --compilers js:babel-register --require source-map-support/register"
  },
  "version": "0.4.2"
}
